// frontend/src/components/WorkoutReport.tsx

import React from "react";

// Helper function to get a consistent color for tiers (re-used from Dashboard)
// This function needs to be outside the component if it's not already global.
// Or we can define it inline here if it's only used by this component.
// For now, let's keep it here for self-containment.
const getTierColor = (tierName: string, alpha: number = 1): string => {
  switch (tierName.toLowerCase()) {
    case "beginner":
      return `rgba(255, 99, 132, ${alpha})`;
    case "developing":
      return `rgba(255, 159, 64, ${alpha})`;
    case "competent":
      return `rgba(255, 205, 86, ${alpha})`;
    case "proficient":
      return `rgba(75, 192, 192, ${alpha})`;
    case "elite":
      return `rgba(54, 162, 235, ${alpha})`;
    default:
      return `rgba(200, 200, 200, ${alpha})`;
  }
};

// Updated interface to include tier min/max reps
interface WorkoutReportData {
  exerciseName: string;
  duration: number;
  totalReps: number;
  accuracy: number;
  completedAt: Date;
  tierName: string;
  tierMinReps: number; // Used for meter
  tierMaxReps: number | null; // Used for meter
}

interface WorkoutReportProps {
  report: WorkoutReportData | null;
  onClose: () => void;
  show: boolean;
}

const WorkoutReport: React.FC<WorkoutReportProps> = ({
  report,
  onClose,
  show,
}) => {
  if (!show || !report) return null;

  // Calculate progress for the meter
  let progressPercentage = 0;
  let tierRange = 0;
  let repsIntoTier = 0;

  if (report.tierMaxReps === null) {
    // For Elite tier or highest tier with no max, display 100% or just a "Maxed Out" visual
    progressPercentage = 100;
  } else {
    tierRange = report.tierMaxReps - report.tierMinReps;
    repsIntoTier = report.totalReps - report.tierMinReps;
    if (tierRange > 0) {
      progressPercentage = (repsIntoTier / tierRange) * 100;
      progressPercentage = Math.min(100, Math.max(0, progressPercentage)); // Clamp between 0-100
    } else {
      // Single-rep tier or tier range is 0, if in tier, then 100%
      if (report.totalReps >= report.tierMinReps) progressPercentage = 100;
    }
  }

  // Get the base color for the achieved tier
  const tierBaseColor = getTierColor(report.tierName);
  const tierProgressBarColor = getTierColor(report.tierName, 0.8); // More opaque for the filled bar

  return (
    <div
      className="workout-report-overlay" // Use a class for overlay styling
      style={{
        position: "fixed",
        top: 0,
        left: 0,
        width: "100%",
        height: "100%",
        backgroundColor: "rgba(0,0,0,0.8)",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        zIndex: 20,
      }}
    >
      <div
        className="workout-report-card card" // Use card class for general styling
        style={{
          // backgroundColor: "#fff", // Handled by Bootstrap .card
          // boxShadow: "0 5px 25px rgba(0,0,0,0.2)", // Handled by Bootstrap .card
          // borderRadius: "12px", // Handled by Bootstrap .card
          padding: "40px",
          textAlign: "center",
          maxWidth: "500px",
          width: "90%",
        }}
      >
        <h2
          className="card-title mb-4"
          style={{ color: "var(--primary-color)" }}
        >
          Workout Complete!
        </h2>

        <h3 className="mb-3" style={{ color: "var(--heading-color)" }}>
          {report.exerciseName}
        </h3>

        <div className="mb-4">
          <p
            className="lead fw-bold mb-1"
            style={{ fontSize: "2.5rem", color: "var(--text-color)" }}
          >
            {report.totalReps} Reps
          </p>
          <p
            className="text-muted mb-3"
            style={{ fontSize: "1.2rem", textTransform: "uppercase" }}
          >
            Achieved Tier:{" "}
            <span className="fw-bold" style={{ color: tierBaseColor }}>
              {report.tierName}
            </span>
          </p>

          {/* Tier Progress Meter */}
          <div className="tier-meter mt-4">
            <div className="tier-meter-label">
              {report.tierMinReps} Reps
              <span>
                {report.tierMaxReps !== null
                  ? `${report.tierMaxReps} Reps`
                  : `Elite Tier`}
              </span>
            </div>
            <div
              className="progress"
              style={{
                height: "20px",
                backgroundColor:
                  `rgba(${tierBaseColor
                    .match(/\d+/g)
                    ?.slice(0, 3)
                    .join(",")}, 0.3)` || "#eee",
              }}
            >
              <div
                className="progress-bar"
                role="progressbar"
                style={{
                  width: `${progressPercentage}%`,
                  backgroundColor: tierProgressBarColor,
                }}
                aria-valuenow={progressPercentage}
                aria-valuemin={0}
                aria-valuemax={100}
              >
                {progressPercentage.toFixed(0)}%
              </div>
            </div>
            <p className="text-muted mt-2">
              Progress within {report.tierName} Tier
            </p>
          </div>
        </div>

        <div className="d-flex justify-content-center gap-3">
          {" "}
          {/* Use Bootstrap flex for buttons */}
          <button
            onClick={onClose}
            className="btn btn-primary btn-lg" // Themed button
          >
            Start New Workout
          </button>
          <button
            onClick={() => window.history.back()}
            className="btn btn-secondary btn-lg" // Themed secondary button
          >
            Back to Exercises
          </button>
        </div>
      </div>
    </div>
  );
};

export default WorkoutReport;