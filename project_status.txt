# Fitness Tracker AI - Project Status

## Overview

This document outlines the current progress of the Fitness Tracker AI project based on the "Fitness Test Web Application - Project Plan.pdf".

## Current Status: Phase 1 Complete

The project has completed the "Phase 1: Core Setup". The frontend and backend have been set up with the core functionalities implemented.

### Frontend (`/frontend`)

*   **Framework:** React.
*   **Styling:** Simple React formatting (No Tailwind CSS).
*   **Progress:**
    *   Basic React app structure with components, pages, and utils.
    *   User authentication UI is implemented.
    *   MediaPipe integration for pose detection is complete.

### Backend (`/backend`)

*   **Framework:** Node.js with Express.
*   **Database:** PostgreSQL is set up and configured.
*   **Authentication:** User authentication with JWT is implemented.
*   **API:** Basic API endpoints for user authentication and other core features are in place, suggested by the `routes` and `models` directories.

## Next Steps: Phase 2 - Exercise Engine

Frontend/src/App.tsx

import React from "react";
import { Routes, Route } from "react-router-dom";
import Home from "./components/Home";
import Login from "./components/auth/Login";
import Register from "./components/auth/Register";
import ExerciseSelection from './components/ExerciseSelection';
import Dashboard from "./components/Dashboard";
import PrivateRoute from "./components/PrivateRoute";
import Navbar from "./components/layout/Navbar";

const App: React.FC = () => {
  return (
    <>
      <Navbar />
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/login" element={<Login />} />
        <Route path="/register" element={<Register />} />
        <Route
          path="/exercises"
          element={
            <PrivateRoute>
              <ExerciseSelection />
            </PrivateRoute>
          }
        />
        <Route
          path="/dashboard"
          element={
            <PrivateRoute>
              <Dashboard />
            </PrivateRoute>
          }
        />
      </Routes>
    </>
  );
};

export default App;

frontend/src/components/ExerciseSelection.tsx

import React, { useState, useEffect } from "react";
import api from "../utils/api";
import { Link } from "react-router-dom";
import { ExerciseCheckpoint } from "../utils/poseUtils"; // Import the interface

// Interface for Exercise data matching your backend model
interface Exercise {
  _id: string;
  name: string;
  description: string;
  targetMuscles: string[];
  checkpoints: ExerciseCheckpoint[];
  instructions: string[];
  difficulty: string;
}

const ExerciseSelection: React.FC = () => {
  const [exercises, setExercises] = useState<Exercise[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchExercises = async () => {
      try {
        const res = await api.get<Exercise[]>("/exercises"); // Fetch all exercises
        setExercises(res.data);
      } catch (err: any) {
        console.error("Error fetching exercises:", err);
        setError(err.response?.data?.message || "Failed to load exercises");
      } finally {
        setLoading(false);
      }
    };

    fetchExercises();
  }, []);

  if (loading) return <div className="p-4">Loading exercises...</div>;
  if (error) return <div className="p-4 text-red-500">Error: {error}</div>;

  return (
    <div className="container mt-5">
      <h1 className="text-3xl font-bold mb-4">Select an Exercise</h1>
      <div className="row">
        {exercises.length === 0 ? (
          <p>No exercises available. Please add some from the backend first.</p>
        ) : (
          exercises.map((exercise) => (
            <div className="col-md-4 mb-4" key={exercise._id}>
              <Link to={`/exercise/${exercise._id}`} className="card-link text-decoration-none text-dark">
                <div className="card h-100">
                  <div className="card-body">
                    <h5 className="card-title">{exercise.name}</h5>
                    <p className="card-text">{exercise.description}</p>
                    <p className="card-text"><small className="text-muted">Difficulty: {exercise.difficulty}</small></p>
                  </div>
                </div>
              </Link>
            </div>
          ))
        )}
      </div>
    </div>
  );
};

export default ExerciseSelection;

frontend/src/components/layout/Navbar.tsx


import React from "react";
import { Link, useNavigate } from "react-router-dom";

const Navbar: React.FC = () => {
  const navigate = useNavigate();
  const isAuthenticated = !!localStorage.getItem("token");

  const handleLogout = () => {
    localStorage.removeItem("token");
    alert("You have been logged out.");
    navigate("/login");
  };

  return (
    <nav className="navbar navbar-expand-lg navbar-dark bg-dark">
      <div className="container-fluid">
        <Link className="navbar-brand" to="/">
          Fitness Tracker AI
        </Link>
        <button
          className="navbar-toggler"
          type="button"
          data-bs-toggle="collapse"
          data-bs-target="#navbarNav"
          aria-controls="navbarNav"
          aria-expanded="false"
          aria-label="Toggle navigation"
        >
          <span className="navbar-toggler-icon"></span>
        </button>
        <div className="collapse navbar-collapse" id="navbarNav">
          <div className="navbar-nav ms-auto">
            {!isAuthenticated ? (
              <>
                <Link className="nav-link" to="/login">
                  Login
                </Link>
                <Link className="nav-link" to="/register">
                  Register
                </Link>
              </>
            ) : (
              <>
                <Link className="nav-link" to="/exercises">
                  Exercises
                </Link>
                <button
                  className="btn btn-link nav-link custom-logout-btn"
                  onClick={handleLogout}
                >
                  Logout
                </button>
              </>
            )}
          </div>
        </div>
      </div>
    </nav>
  );
};

export default Navbar;

I change all the front end style using Bootstrap. I remove a few redundant buttons. Check the frontend folders structure to see which files I added are new and need to provide.

